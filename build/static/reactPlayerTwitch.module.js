(window["__LOADABLE_LOADED_CHUNKS__"] = window["__LOADABLE_LOADED_CHUNKS__"] || []).push([["reactPlayerTwitch"],{

/***/ "./node_modules/react-player/lazy/players/Twitch.js":
/*!**********************************************************!*\
  !*** ./node_modules/react-player/lazy/players/Twitch.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ \"./node_modules/core-js/modules/es.regexp.exec.js\");__webpack_require__(/*! core-js/modules/es.string.match.js */ \"./node_modules/core-js/modules/es.string.match.js\");var __create=Object.create;var __defProp=Object.defineProperty;var __getOwnPropDesc=Object.getOwnPropertyDescriptor;var __getOwnPropNames=Object.getOwnPropertyNames;var __getProtoOf=Object.getPrototypeOf;var __hasOwnProp=Object.prototype.hasOwnProperty;var __defNormalProp=(obj,key,value)=>key in obj?__defProp(obj,key,{enumerable:true,configurable:true,writable:true,value}):obj[key]=value;var __export=(target,all)=>{for(var name in all)__defProp(target,name,{get:all[name],enumerable:true});};var __copyProps=(to,from,except,desc)=>{if(from&&typeof from===\"object\"||typeof from===\"function\"){for(let key of __getOwnPropNames(from))if(!__hasOwnProp.call(to,key)&&key!==except)__defProp(to,key,{get:()=>from[key],enumerable:!(desc=__getOwnPropDesc(from,key))||desc.enumerable});}return to;};var __toESM=(mod,isNodeMode,target)=>(target=mod!=null?__create(__getProtoOf(mod)):{},__copyProps(// If the importer is in node compatibility mode or this is not an ESM\n// file that has been converted to a CommonJS file using a Babel-\n// compatible transform (i.e. \"__esModule\" has not been set), then set\n// \"default\" to the CommonJS \"module.exports\" for node compatibility.\nisNodeMode||!mod||!mod.__esModule?__defProp(target,\"default\",{value:mod,enumerable:true}):target,mod));var __toCommonJS=mod=>__copyProps(__defProp({},\"__esModule\",{value:true}),mod);var __publicField=(obj,key,value)=>{__defNormalProp(obj,typeof key!==\"symbol\"?key+\"\":key,value);return value;};var Twitch_exports={};__export(Twitch_exports,{default:()=>Twitch});module.exports=__toCommonJS(Twitch_exports);var import_react=__toESM(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));var import_utils=__webpack_require__(/*! ../utils */ \"./node_modules/react-player/lazy/utils.js\");var import_patterns=__webpack_require__(/*! ../patterns */ \"./node_modules/react-player/lazy/patterns.js\");const SDK_URL=\"https://player.twitch.tv/js/embed/v1.js\";const SDK_GLOBAL=\"Twitch\";const PLAYER_ID_PREFIX=\"twitch-player-\";class Twitch extends import_react.Component{constructor(){super(...arguments);__publicField(this,\"callPlayer\",import_utils.callPlayer);__publicField(this,\"playerID\",this.props.config.playerId||`${PLAYER_ID_PREFIX}${(0,import_utils.randomString)()}`);__publicField(this,\"mute\",()=>{this.callPlayer(\"setMuted\",true);});__publicField(this,\"unmute\",()=>{this.callPlayer(\"setMuted\",false);});}componentDidMount(){this.props.onMount&&this.props.onMount(this);}load(url,isReady){const{playsinline,onError,config,controls}=this.props;const isChannel=import_patterns.MATCH_URL_TWITCH_CHANNEL.test(url);const id=isChannel?url.match(import_patterns.MATCH_URL_TWITCH_CHANNEL)[1]:url.match(import_patterns.MATCH_URL_TWITCH_VIDEO)[1];if(isReady){if(isChannel){this.player.setChannel(id);}else{this.player.setVideo(\"v\"+id);}return;}(0,import_utils.getSDK)(SDK_URL,SDK_GLOBAL).then(Twitch2=>{this.player=new Twitch2.Player(this.playerID,_objectSpread({video:isChannel?\"\":id,channel:isChannel?id:\"\",height:\"100%\",width:\"100%\",playsinline,autoplay:this.props.playing,muted:this.props.muted,// https://github.com/CookPete/react-player/issues/733#issuecomment-549085859\ncontrols:isChannel?true:controls,time:(0,import_utils.parseStartTime)(url)},config.options));const{READY,PLAYING,PAUSE,ENDED,ONLINE,OFFLINE,SEEK}=Twitch2.Player;this.player.addEventListener(READY,this.props.onReady);this.player.addEventListener(PLAYING,this.props.onPlay);this.player.addEventListener(PAUSE,this.props.onPause);this.player.addEventListener(ENDED,this.props.onEnded);this.player.addEventListener(SEEK,this.props.onSeek);this.player.addEventListener(ONLINE,this.props.onLoaded);this.player.addEventListener(OFFLINE,this.props.onLoaded);},onError);}play(){this.callPlayer(\"play\");}pause(){this.callPlayer(\"pause\");}stop(){this.callPlayer(\"pause\");}seekTo(seconds,keepPlaying=true){this.callPlayer(\"seek\",seconds);if(!keepPlaying){this.pause();}}setVolume(fraction){this.callPlayer(\"setVolume\",fraction);}getDuration(){return this.callPlayer(\"getDuration\");}getCurrentTime(){return this.callPlayer(\"getCurrentTime\");}getSecondsLoaded(){return null;}render(){const style={width:\"100%\",height:\"100%\"};return/* @__PURE__ */import_react.default.createElement(\"div\",{style,id:this.playerID});}}__publicField(Twitch,\"displayName\",\"Twitch\");__publicField(Twitch,\"canPlay\",import_patterns.canPlay.twitch);__publicField(Twitch,\"loopOnEnded\",true);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcGxheWVyL2xhenkvcGxheWVycy9Ud2l0Y2guanM/NTczOCJdLCJuYW1lcyI6WyJfX2NyZWF0ZSIsIk9iamVjdCIsImNyZWF0ZSIsIl9fZGVmUHJvcCIsImRlZmluZVByb3BlcnR5IiwiX19nZXRPd25Qcm9wRGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9fZ2V0T3duUHJvcE5hbWVzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIl9fZ2V0UHJvdG9PZiIsImdldFByb3RvdHlwZU9mIiwiX19oYXNPd25Qcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJfX2RlZk5vcm1hbFByb3AiLCJvYmoiLCJrZXkiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIl9fZXhwb3J0IiwidGFyZ2V0IiwiYWxsIiwibmFtZSIsImdldCIsIl9fY29weVByb3BzIiwidG8iLCJmcm9tIiwiZXhjZXB0IiwiZGVzYyIsImNhbGwiLCJfX3RvRVNNIiwibW9kIiwiaXNOb2RlTW9kZSIsIl9fZXNNb2R1bGUiLCJfX3RvQ29tbW9uSlMiLCJfX3B1YmxpY0ZpZWxkIiwiVHdpdGNoX2V4cG9ydHMiLCJkZWZhdWx0IiwiVHdpdGNoIiwibW9kdWxlIiwiZXhwb3J0cyIsImltcG9ydF9yZWFjdCIsInJlcXVpcmUiLCJpbXBvcnRfdXRpbHMiLCJpbXBvcnRfcGF0dGVybnMiLCJTREtfVVJMIiwiU0RLX0dMT0JBTCIsIlBMQVlFUl9JRF9QUkVGSVgiLCJDb21wb25lbnQiLCJjb25zdHJ1Y3RvciIsImFyZ3VtZW50cyIsImNhbGxQbGF5ZXIiLCJwcm9wcyIsImNvbmZpZyIsInBsYXllcklkIiwicmFuZG9tU3RyaW5nIiwiY29tcG9uZW50RGlkTW91bnQiLCJvbk1vdW50IiwibG9hZCIsInVybCIsImlzUmVhZHkiLCJwbGF5c2lubGluZSIsIm9uRXJyb3IiLCJjb250cm9scyIsImlzQ2hhbm5lbCIsIk1BVENIX1VSTF9UV0lUQ0hfQ0hBTk5FTCIsInRlc3QiLCJpZCIsIm1hdGNoIiwiTUFUQ0hfVVJMX1RXSVRDSF9WSURFTyIsInBsYXllciIsInNldENoYW5uZWwiLCJzZXRWaWRlbyIsImdldFNESyIsInRoZW4iLCJUd2l0Y2gyIiwiUGxheWVyIiwicGxheWVySUQiLCJ2aWRlbyIsImNoYW5uZWwiLCJoZWlnaHQiLCJ3aWR0aCIsImF1dG9wbGF5IiwicGxheWluZyIsIm11dGVkIiwidGltZSIsInBhcnNlU3RhcnRUaW1lIiwib3B0aW9ucyIsIlJFQURZIiwiUExBWUlORyIsIlBBVVNFIiwiRU5ERUQiLCJPTkxJTkUiLCJPRkZMSU5FIiwiU0VFSyIsImFkZEV2ZW50TGlzdGVuZXIiLCJvblJlYWR5Iiwib25QbGF5Iiwib25QYXVzZSIsIm9uRW5kZWQiLCJvblNlZWsiLCJvbkxvYWRlZCIsInBsYXkiLCJwYXVzZSIsInN0b3AiLCJzZWVrVG8iLCJzZWNvbmRzIiwia2VlcFBsYXlpbmciLCJzZXRWb2x1bWUiLCJmcmFjdGlvbiIsImdldER1cmF0aW9uIiwiZ2V0Q3VycmVudFRpbWUiLCJnZXRTZWNvbmRzTG9hZGVkIiwicmVuZGVyIiwic3R5bGUiLCJjcmVhdGVFbGVtZW50IiwiY2FuUGxheSIsInR3aXRjaCJdLCJtYXBwaW5ncyI6Im02Q0FBQSxHQUFJQSxTQUFRLENBQUdDLE1BQU0sQ0FBQ0MsTUFBdEIsQ0FDQSxHQUFJQyxVQUFTLENBQUdGLE1BQU0sQ0FBQ0csY0FBdkIsQ0FDQSxHQUFJQyxpQkFBZ0IsQ0FBR0osTUFBTSxDQUFDSyx3QkFBOUIsQ0FDQSxHQUFJQyxrQkFBaUIsQ0FBR04sTUFBTSxDQUFDTyxtQkFBL0IsQ0FDQSxHQUFJQyxhQUFZLENBQUdSLE1BQU0sQ0FBQ1MsY0FBMUIsQ0FDQSxHQUFJQyxhQUFZLENBQUdWLE1BQU0sQ0FBQ1csU0FBUCxDQUFpQkMsY0FBcEMsQ0FDQSxHQUFJQyxnQkFBZSxDQUFHLENBQUNDLEdBQUQsQ0FBTUMsR0FBTixDQUFXQyxLQUFY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QXdCdUQsT0FBeEIsRUFDQSxHQUFJLENBQUNDLFdBQUwsQ0FBa0IsQ0FDaEIsS0FBS0osS0FBTCxHQUNELENBQ0YsQ0FDREssU0FBUyxDQUFDQyxRQUFELENBQVcsQ0FDbEIsS0FBSzFELFVBQUwsQ0FBZ0IsV0FBaEIsQ0FBNkIwRCxRQUE3QixFQUNELENBQ0RDLFdBQVcsRUFBRyxDQUNaLE1BQU8sTUFBSzNELFVBQUwsQ0FBZ0IsYUFBaEIsQ0FBUCxDQUNELENBQ0Q0RCxjQUFjLEVBQUcsQ0FDZixNQUFPLE1BQUs1RCxVQUFMLENBQWdCLGdCQUFoQixDQUFQLENBQ0QsQ0FDRDZELGdCQUFnQixFQUFHLENBQ2pCLE1BQU8sS0FBUCxDQUNELENBQ0RDLE1BQU0sRUFBRyxDQUNQLEtBQU1DLE1BQUssQ0FBRyxDQUNaakMsS0FBSyxDQUFFLE1BREssQ0FFWkQsTUFBTSxDQUFFLE1BRkksQ0FBZCxDQUlBLE1BQU8sZUFBZ0J2QyxZQUFZLENBQUNKLE9BQWIsQ0FBcUI4RSxhQUFyQixDQUFtQyxLQUFuQyxDQUEwQyxDQUFFRCxLQUFGLENBQVMvQyxFQUFFLENBQUUsS0FBS1UsUUFBbEIsQ0FBMUMsQ0FBdkIsQ0FDRCxDQXBGeUMsQ0FzRjVDMUMsYUFBYSxDQUFDRyxNQUFELENBQVMsYUFBVCxDQUF3QixRQUF4QixDQUFiLENBQ0FILGFBQWEsQ0FBQ0csTUFBRCxDQUFTLFNBQVQsQ0FBb0JNLGVBQWUsQ0FBQ3dFLE9BQWhCLENBQXdCQyxNQUE1QyxDQUFiLENBQ0FsRixhQUFhLENBQUNHLE1BQUQsQ0FBUyxhQUFULENBQXdCLElBQXhCLENBQWIiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtcGxheWVyL2xhenkvcGxheWVycy9Ud2l0Y2guanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19jcmVhdGUgPSBPYmplY3QuY3JlYXRlO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9fZ2V0UHJvdG9PZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fZGVmTm9ybWFsUHJvcCA9IChvYmosIGtleSwgdmFsdWUpID0+IGtleSBpbiBvYmogPyBfX2RlZlByb3Aob2JqLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSwgdmFsdWUgfSkgOiBvYmpba2V5XSA9IHZhbHVlO1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9FU00gPSAobW9kLCBpc05vZGVNb2RlLCB0YXJnZXQpID0+ICh0YXJnZXQgPSBtb2QgIT0gbnVsbCA/IF9fY3JlYXRlKF9fZ2V0UHJvdG9PZihtb2QpKSA6IHt9LCBfX2NvcHlQcm9wcyhcbiAgLy8gSWYgdGhlIGltcG9ydGVyIGlzIGluIG5vZGUgY29tcGF0aWJpbGl0eSBtb2RlIG9yIHRoaXMgaXMgbm90IGFuIEVTTVxuICAvLyBmaWxlIHRoYXQgaGFzIGJlZW4gY29udmVydGVkIHRvIGEgQ29tbW9uSlMgZmlsZSB1c2luZyBhIEJhYmVsLVxuICAvLyBjb21wYXRpYmxlIHRyYW5zZm9ybSAoaS5lLiBcIl9fZXNNb2R1bGVcIiBoYXMgbm90IGJlZW4gc2V0KSwgdGhlbiBzZXRcbiAgLy8gXCJkZWZhdWx0XCIgdG8gdGhlIENvbW1vbkpTIFwibW9kdWxlLmV4cG9ydHNcIiBmb3Igbm9kZSBjb21wYXRpYmlsaXR5LlxuICBpc05vZGVNb2RlIHx8ICFtb2QgfHwgIW1vZC5fX2VzTW9kdWxlID8gX19kZWZQcm9wKHRhcmdldCwgXCJkZWZhdWx0XCIsIHsgdmFsdWU6IG1vZCwgZW51bWVyYWJsZTogdHJ1ZSB9KSA6IHRhcmdldCxcbiAgbW9kXG4pKTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xudmFyIF9fcHVibGljRmllbGQgPSAob2JqLCBrZXksIHZhbHVlKSA9PiB7XG4gIF9fZGVmTm9ybWFsUHJvcChvYmosIHR5cGVvZiBrZXkgIT09IFwic3ltYm9sXCIgPyBrZXkgKyBcIlwiIDoga2V5LCB2YWx1ZSk7XG4gIHJldHVybiB2YWx1ZTtcbn07XG52YXIgVHdpdGNoX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KFR3aXRjaF9leHBvcnRzLCB7XG4gIGRlZmF1bHQ6ICgpID0+IFR3aXRjaFxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhUd2l0Y2hfZXhwb3J0cyk7XG52YXIgaW1wb3J0X3JlYWN0ID0gX190b0VTTShyZXF1aXJlKFwicmVhY3RcIikpO1xudmFyIGltcG9ydF91dGlscyA9IHJlcXVpcmUoXCIuLi91dGlsc1wiKTtcbnZhciBpbXBvcnRfcGF0dGVybnMgPSByZXF1aXJlKFwiLi4vcGF0dGVybnNcIik7XG5jb25zdCBTREtfVVJMID0gXCJodHRwczovL3BsYXllci50d2l0Y2gudHYvanMvZW1iZWQvdjEuanNcIjtcbmNvbnN0IFNES19HTE9CQUwgPSBcIlR3aXRjaFwiO1xuY29uc3QgUExBWUVSX0lEX1BSRUZJWCA9IFwidHdpdGNoLXBsYXllci1cIjtcbmNsYXNzIFR3aXRjaCBleHRlbmRzIGltcG9ydF9yZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJjYWxsUGxheWVyXCIsIGltcG9ydF91dGlscy5jYWxsUGxheWVyKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwicGxheWVySURcIiwgdGhpcy5wcm9wcy5jb25maWcucGxheWVySWQgfHwgYCR7UExBWUVSX0lEX1BSRUZJWH0keygwLCBpbXBvcnRfdXRpbHMucmFuZG9tU3RyaW5nKSgpfWApO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJtdXRlXCIsICgpID0+IHtcbiAgICAgIHRoaXMuY2FsbFBsYXllcihcInNldE11dGVkXCIsIHRydWUpO1xuICAgIH0pO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJ1bm11dGVcIiwgKCkgPT4ge1xuICAgICAgdGhpcy5jYWxsUGxheWVyKFwic2V0TXV0ZWRcIiwgZmFsc2UpO1xuICAgIH0pO1xuICB9XG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMucHJvcHMub25Nb3VudCAmJiB0aGlzLnByb3BzLm9uTW91bnQodGhpcyk7XG4gIH1cbiAgbG9hZCh1cmwsIGlzUmVhZHkpIHtcbiAgICBjb25zdCB7IHBsYXlzaW5saW5lLCBvbkVycm9yLCBjb25maWcsIGNvbnRyb2xzIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IGlzQ2hhbm5lbCA9IGltcG9ydF9wYXR0ZXJucy5NQVRDSF9VUkxfVFdJVENIX0NIQU5ORUwudGVzdCh1cmwpO1xuICAgIGNvbnN0IGlkID0gaXNDaGFubmVsID8gdXJsLm1hdGNoKGltcG9ydF9wYXR0ZXJucy5NQVRDSF9VUkxfVFdJVENIX0NIQU5ORUwpWzFdIDogdXJsLm1hdGNoKGltcG9ydF9wYXR0ZXJucy5NQVRDSF9VUkxfVFdJVENIX1ZJREVPKVsxXTtcbiAgICBpZiAoaXNSZWFkeSkge1xuICAgICAgaWYgKGlzQ2hhbm5lbCkge1xuICAgICAgICB0aGlzLnBsYXllci5zZXRDaGFubmVsKGlkKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucGxheWVyLnNldFZpZGVvKFwidlwiICsgaWQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAoMCwgaW1wb3J0X3V0aWxzLmdldFNESykoU0RLX1VSTCwgU0RLX0dMT0JBTCkudGhlbigoVHdpdGNoMikgPT4ge1xuICAgICAgdGhpcy5wbGF5ZXIgPSBuZXcgVHdpdGNoMi5QbGF5ZXIodGhpcy5wbGF5ZXJJRCwge1xuICAgICAgICB2aWRlbzogaXNDaGFubmVsID8gXCJcIiA6IGlkLFxuICAgICAgICBjaGFubmVsOiBpc0NoYW5uZWwgPyBpZCA6IFwiXCIsXG4gICAgICAgIGhlaWdodDogXCIxMDAlXCIsXG4gICAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgcGxheXNpbmxpbmUsXG4gICAgICAgIGF1dG9wbGF5OiB0aGlzLnByb3BzLnBsYXlpbmcsXG4gICAgICAgIG11dGVkOiB0aGlzLnByb3BzLm11dGVkLFxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vQ29va1BldGUvcmVhY3QtcGxheWVyL2lzc3Vlcy83MzMjaXNzdWVjb21tZW50LTU0OTA4NTg1OVxuICAgICAgICBjb250cm9sczogaXNDaGFubmVsID8gdHJ1ZSA6IGNvbnRyb2xzLFxuICAgICAgICB0aW1lOiAoMCwgaW1wb3J0X3V0aWxzLnBhcnNlU3RhcnRUaW1lKSh1cmwpLFxuICAgICAgICAuLi5jb25maWcub3B0aW9uc1xuICAgICAgfSk7XG4gICAgICBjb25zdCB7IFJFQURZLCBQTEFZSU5HLCBQQVVTRSwgRU5ERUQsIE9OTElORSwgT0ZGTElORSwgU0VFSyB9ID0gVHdpdGNoMi5QbGF5ZXI7XG4gICAgICB0aGlzLnBsYXllci5hZGRFdmVudExpc3RlbmVyKFJFQURZLCB0aGlzLnByb3BzLm9uUmVhZHkpO1xuICAgICAgdGhpcy5wbGF5ZXIuYWRkRXZlbnRMaXN0ZW5lcihQTEFZSU5HLCB0aGlzLnByb3BzLm9uUGxheSk7XG4gICAgICB0aGlzLnBsYXllci5hZGRFdmVudExpc3RlbmVyKFBBVVNFLCB0aGlzLnByb3BzLm9uUGF1c2UpO1xuICAgICAgdGhpcy5wbGF5ZXIuYWRkRXZlbnRMaXN0ZW5lcihFTkRFRCwgdGhpcy5wcm9wcy5vbkVuZGVkKTtcbiAgICAgIHRoaXMucGxheWVyLmFkZEV2ZW50TGlzdGVuZXIoU0VFSywgdGhpcy5wcm9wcy5vblNlZWspO1xuICAgICAgdGhpcy5wbGF5ZXIuYWRkRXZlbnRMaXN0ZW5lcihPTkxJTkUsIHRoaXMucHJvcHMub25Mb2FkZWQpO1xuICAgICAgdGhpcy5wbGF5ZXIuYWRkRXZlbnRMaXN0ZW5lcihPRkZMSU5FLCB0aGlzLnByb3BzLm9uTG9hZGVkKTtcbiAgICB9LCBvbkVycm9yKTtcbiAgfVxuICBwbGF5KCkge1xuICAgIHRoaXMuY2FsbFBsYXllcihcInBsYXlcIik7XG4gIH1cbiAgcGF1c2UoKSB7XG4gICAgdGhpcy5jYWxsUGxheWVyKFwicGF1c2VcIik7XG4gIH1cbiAgc3RvcCgpIHtcbiAgICB0aGlzLmNhbGxQbGF5ZXIoXCJwYXVzZVwiKTtcbiAgfVxuICBzZWVrVG8oc2Vjb25kcywga2VlcFBsYXlpbmcgPSB0cnVlKSB7XG4gICAgdGhpcy5jYWxsUGxheWVyKFwic2Vla1wiLCBzZWNvbmRzKTtcbiAgICBpZiAoIWtlZXBQbGF5aW5nKSB7XG4gICAgICB0aGlzLnBhdXNlKCk7XG4gICAgfVxuICB9XG4gIHNldFZvbHVtZShmcmFjdGlvbikge1xuICAgIHRoaXMuY2FsbFBsYXllcihcInNldFZvbHVtZVwiLCBmcmFjdGlvbik7XG4gIH1cbiAgZ2V0RHVyYXRpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuY2FsbFBsYXllcihcImdldER1cmF0aW9uXCIpO1xuICB9XG4gIGdldEN1cnJlbnRUaW1lKCkge1xuICAgIHJldHVybiB0aGlzLmNhbGxQbGF5ZXIoXCJnZXRDdXJyZW50VGltZVwiKTtcbiAgfVxuICBnZXRTZWNvbmRzTG9hZGVkKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCBzdHlsZSA9IHtcbiAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgIGhlaWdodDogXCIxMDAlXCJcbiAgICB9O1xuICAgIHJldHVybiAvKiBAX19QVVJFX18gKi8gaW1wb3J0X3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IHN0eWxlLCBpZDogdGhpcy5wbGF5ZXJJRCB9KTtcbiAgfVxufVxuX19wdWJsaWNGaWVsZChUd2l0Y2gsIFwiZGlzcGxheU5hbWVcIiwgXCJUd2l0Y2hcIik7XG5fX3B1YmxpY0ZpZWxkKFR3aXRjaCwgXCJjYW5QbGF5XCIsIGltcG9ydF9wYXR0ZXJucy5jYW5QbGF5LnR3aXRjaCk7XG5fX3B1YmxpY0ZpZWxkKFR3aXRjaCwgXCJsb29wT25FbmRlZFwiLCB0cnVlKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/react-player/lazy/players/Twitch.js\n");

/***/ })

}]);