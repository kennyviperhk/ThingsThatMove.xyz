(window["__LOADABLE_LOADED_CHUNKS__"] = window["__LOADABLE_LOADED_CHUNKS__"] || []).push([["reactPlayerVidyard"],{

/***/ "./node_modules/react-player/lazy/players/Vidyard.js":
/*!***********************************************************!*\
  !*** ./node_modules/react-player/lazy/players/Vidyard.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ \"./node_modules/core-js/modules/es.regexp.exec.js\");__webpack_require__(/*! core-js/modules/es.string.match.js */ \"./node_modules/core-js/modules/es.string.match.js\");var __create=Object.create;var __defProp=Object.defineProperty;var __getOwnPropDesc=Object.getOwnPropertyDescriptor;var __getOwnPropNames=Object.getOwnPropertyNames;var __getProtoOf=Object.getPrototypeOf;var __hasOwnProp=Object.prototype.hasOwnProperty;var __defNormalProp=(obj,key,value)=>key in obj?__defProp(obj,key,{enumerable:true,configurable:true,writable:true,value}):obj[key]=value;var __export=(target,all)=>{for(var name in all)__defProp(target,name,{get:all[name],enumerable:true});};var __copyProps=(to,from,except,desc)=>{if(from&&typeof from===\"object\"||typeof from===\"function\"){for(let key of __getOwnPropNames(from))if(!__hasOwnProp.call(to,key)&&key!==except)__defProp(to,key,{get:()=>from[key],enumerable:!(desc=__getOwnPropDesc(from,key))||desc.enumerable});}return to;};var __toESM=(mod,isNodeMode,target)=>(target=mod!=null?__create(__getProtoOf(mod)):{},__copyProps(// If the importer is in node compatibility mode or this is not an ESM\n// file that has been converted to a CommonJS file using a Babel-\n// compatible transform (i.e. \"__esModule\" has not been set), then set\n// \"default\" to the CommonJS \"module.exports\" for node compatibility.\nisNodeMode||!mod||!mod.__esModule?__defProp(target,\"default\",{value:mod,enumerable:true}):target,mod));var __toCommonJS=mod=>__copyProps(__defProp({},\"__esModule\",{value:true}),mod);var __publicField=(obj,key,value)=>{__defNormalProp(obj,typeof key!==\"symbol\"?key+\"\":key,value);return value;};var Vidyard_exports={};__export(Vidyard_exports,{default:()=>Vidyard});module.exports=__toCommonJS(Vidyard_exports);var import_react=__toESM(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));var import_utils=__webpack_require__(/*! ../utils */ \"./node_modules/react-player/lazy/utils.js\");var import_patterns=__webpack_require__(/*! ../patterns */ \"./node_modules/react-player/lazy/patterns.js\");const SDK_URL=\"https://play.vidyard.com/embed/v4.js\";const SDK_GLOBAL=\"VidyardV4\";const SDK_GLOBAL_READY=\"onVidyardAPI\";class Vidyard extends import_react.Component{constructor(){super(...arguments);__publicField(this,\"callPlayer\",import_utils.callPlayer);__publicField(this,\"mute\",()=>{this.setVolume(0);});__publicField(this,\"unmute\",()=>{if(this.props.volume!==null){this.setVolume(this.props.volume);}});__publicField(this,\"ref\",container=>{this.container=container;});}componentDidMount(){this.props.onMount&&this.props.onMount(this);}load(url){const{playing,config,onError,onDuration}=this.props;const id=url&&url.match(import_patterns.MATCH_URL_VIDYARD)[1];if(this.player){this.stop();}(0,import_utils.getSDK)(SDK_URL,SDK_GLOBAL,SDK_GLOBAL_READY).then(Vidyard2=>{if(!this.container)return;Vidyard2.api.addReadyListener((data,player)=>{if(this.player){return;}this.player=player;this.player.on(\"ready\",this.props.onReady);this.player.on(\"play\",this.props.onPlay);this.player.on(\"pause\",this.props.onPause);this.player.on(\"seek\",this.props.onSeek);this.player.on(\"playerComplete\",this.props.onEnded);},id);Vidyard2.api.renderPlayer(_objectSpread({uuid:id,container:this.container,autoplay:playing?1:0},config.options));Vidyard2.api.getPlayerMetadata(id).then(meta=>{this.duration=meta.length_in_seconds;onDuration(meta.length_in_seconds);});},onError);}play(){this.callPlayer(\"play\");}pause(){this.callPlayer(\"pause\");}stop(){window.VidyardV4.api.destroyPlayer(this.player);}seekTo(amount,keepPlaying=true){this.callPlayer(\"seek\",amount);if(!keepPlaying){this.pause();}}setVolume(fraction){this.callPlayer(\"setVolume\",fraction);}setPlaybackRate(rate){this.callPlayer(\"setPlaybackSpeed\",rate);}getDuration(){return this.duration;}getCurrentTime(){return this.callPlayer(\"currentTime\");}getSecondsLoaded(){return null;}render(){const{display}=this.props;const style={width:\"100%\",height:\"100%\",display};return/* @__PURE__ */import_react.default.createElement(\"div\",{style},/* @__PURE__ */import_react.default.createElement(\"div\",{ref:this.ref}));}}__publicField(Vidyard,\"displayName\",\"Vidyard\");__publicField(Vidyard,\"canPlay\",import_patterns.canPlay.vidyard);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-player/lazy/players/Vidyard.js\n");

/***/ })

}]);