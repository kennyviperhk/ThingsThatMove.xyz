(window["__LOADABLE_LOADED_CHUNKS__"] = window["__LOADABLE_LOADED_CHUNKS__"] || []).push([["reactPlayerYouTube"],{

/***/ "./node_modules/react-player/lazy/players/YouTube.js":
/*!***********************************************************!*\
  !*** ./node_modules/react-player/lazy/players/YouTube.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ \"./node_modules/core-js/modules/es.regexp.exec.js\");__webpack_require__(/*! core-js/modules/es.string.match.js */ \"./node_modules/core-js/modules/es.string.match.js\");__webpack_require__(/*! core-js/modules/es.string.replace.js */ \"./node_modules/core-js/modules/es.string.replace.js\");var __create=Object.create;var __defProp=Object.defineProperty;var __getOwnPropDesc=Object.getOwnPropertyDescriptor;var __getOwnPropNames=Object.getOwnPropertyNames;var __getProtoOf=Object.getPrototypeOf;var __hasOwnProp=Object.prototype.hasOwnProperty;var __defNormalProp=(obj,key,value)=>key in obj?__defProp(obj,key,{enumerable:true,configurable:true,writable:true,value}):obj[key]=value;var __export=(target,all)=>{for(var name in all)__defProp(target,name,{get:all[name],enumerable:true});};var __copyProps=(to,from,except,desc)=>{if(from&&typeof from===\"object\"||typeof from===\"function\"){for(let key of __getOwnPropNames(from))if(!__hasOwnProp.call(to,key)&&key!==except)__defProp(to,key,{get:()=>from[key],enumerable:!(desc=__getOwnPropDesc(from,key))||desc.enumerable});}return to;};var __toESM=(mod,isNodeMode,target)=>(target=mod!=null?__create(__getProtoOf(mod)):{},__copyProps(// If the importer is in node compatibility mode or this is not an ESM\n// file that has been converted to a CommonJS file using a Babel-\n// compatible transform (i.e. \"__esModule\" has not been set), then set\n// \"default\" to the CommonJS \"module.exports\" for node compatibility.\nisNodeMode||!mod||!mod.__esModule?__defProp(target,\"default\",{value:mod,enumerable:true}):target,mod));var __toCommonJS=mod=>__copyProps(__defProp({},\"__esModule\",{value:true}),mod);var __publicField=(obj,key,value)=>{__defNormalProp(obj,typeof key!==\"symbol\"?key+\"\":key,value);return value;};var YouTube_exports={};__export(YouTube_exports,{default:()=>YouTube});module.exports=__toCommonJS(YouTube_exports);var import_react=__toESM(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));var import_utils=__webpack_require__(/*! ../utils */ \"./node_modules/react-player/lazy/utils.js\");var import_patterns=__webpack_require__(/*! ../patterns */ \"./node_modules/react-player/lazy/patterns.js\");const SDK_URL=\"https://www.youtube.com/iframe_api\";const SDK_GLOBAL=\"YT\";const SDK_GLOBAL_READY=\"onYouTubeIframeAPIReady\";const MATCH_PLAYLIST=/[?&](?:list|channel)=([a-zA-Z0-9_-]+)/;const MATCH_USER_UPLOADS=/user\\/([a-zA-Z0-9_-]+)\\/?/;const MATCH_NOCOOKIE=/youtube-nocookie\\.com/;const NOCOOKIE_HOST=\"https://www.youtube-nocookie.com\";class YouTube extends import_react.Component{constructor(){super(...arguments);__publicField(this,\"callPlayer\",import_utils.callPlayer);__publicField(this,\"parsePlaylist\",url=>{if(url instanceof Array){return{listType:\"playlist\",playlist:url.map(this.getID).join(\",\")};}if(MATCH_PLAYLIST.test(url)){const[,playlistId]=url.match(MATCH_PLAYLIST);return{listType:\"playlist\",list:playlistId.replace(/^UC/,\"UU\")};}if(MATCH_USER_UPLOADS.test(url)){const[,username]=url.match(MATCH_USER_UPLOADS);return{listType:\"user_uploads\",list:username};}return{};});__publicField(this,\"onStateChange\",event=>{const{data}=event;const{onPlay,onPause,onBuffer,onBufferEnd,onEnded,onReady,loop,config:{playerVars,onUnstarted}}=this.props;const{UNSTARTED,PLAYING,PAUSED,BUFFERING,ENDED,CUED}=window[SDK_GLOBAL].PlayerState;if(data===UNSTARTED)onUnstarted();if(data===PLAYING){onPlay();onBufferEnd();}if(data===PAUSED)onPause();if(data===BUFFERING)onBuffer();if(data===ENDED){const isPlaylist=!!this.callPlayer(\"getPlaylist\");if(loop&&!isPlaylist){if(playerVars.start){this.seekTo(playerVars.start);}else{this.play();}}onEnded();}if(data===CUED)onReady();});__publicField(this,\"mute\",()=>{this.callPlayer(\"mute\");});__publicField(this,\"unmute\",()=>{this.callPlayer(\"unMute\");});__publicField(this,\"ref\",container=>{this.container=container;});}componentDidMount(){this.props.onMount&&this.props.onMount(this);}getID(url){if(!url||url instanceof Array||MATCH_PLAYLIST.test(url)){return null;}return url.match(import_patterns.MATCH_URL_YOUTUBE)[1];}load(url,isReady){const{playing,muted,playsinline,controls,loop,config,onError}=this.props;const{playerVars,embedOptions}=config;const id=this.getID(url);if(isReady){if(MATCH_PLAYLIST.test(url)||MATCH_USER_UPLOADS.test(url)||url instanceof Array){this.player.loadPlaylist(this.parsePlaylist(url));return;}this.player.cueVideoById({videoId:id,startSeconds:(0,import_utils.parseStartTime)(url)||playerVars.start,endSeconds:(0,import_utils.parseEndTime)(url)||playerVars.end});return;}(0,import_utils.getSDK)(SDK_URL,SDK_GLOBAL,SDK_GLOBAL_READY,YT=>YT.loaded).then(YT=>{if(!this.container)return;this.player=new YT.Player(this.container,_objectSpread({width:\"100%\",height:\"100%\",videoId:id,playerVars:_objectSpread(_objectSpread({autoplay:playing?1:0,mute:muted?1:0,controls:controls?1:0,start:(0,import_utils.parseStartTime)(url),end:(0,import_utils.parseEndTime)(url),origin:window.location.origin,playsinline:playsinline?1:0},this.parsePlaylist(url)),playerVars),events:{onReady:()=>{if(loop){this.player.setLoop(true);}this.props.onReady();},onPlaybackRateChange:event=>this.props.onPlaybackRateChange(event.data),onPlaybackQualityChange:event=>this.props.onPlaybackQualityChange(event),onStateChange:this.onStateChange,onError:event=>onError(event.data)},host:MATCH_NOCOOKIE.test(url)?NOCOOKIE_HOST:void 0},embedOptions));},onError);if(embedOptions.events){console.warn(\"Using `embedOptions.events` will likely break things. Use ReactPlayer\\u2019s callback props instead, eg onReady, onPlay, onPause\");}}play(){this.callPlayer(\"playVideo\");}pause(){this.callPlayer(\"pauseVideo\");}stop(){if(!document.body.contains(this.callPlayer(\"getIframe\")))return;this.callPlayer(\"stopVideo\");}seekTo(amount,keepPlaying=false){this.callPlayer(\"seekTo\",amount);if(!keepPlaying&&!this.props.playing){this.pause();}}setVolume(fraction){this.callPlayer(\"setVolume\",fraction*100);}setPlaybackRate(rate){this.callPlayer(\"setPlaybackRate\",rate);}setLoop(loop){this.callPlayer(\"setLoop\",loop);}getDuration(){return this.callPlayer(\"getDuration\");}getCurrentTime(){return this.callPlayer(\"getCurrentTime\");}getSecondsLoaded(){return this.callPlayer(\"getVideoLoadedFraction\")*this.getDuration();}render(){const{display}=this.props;const style={width:\"100%\",height:\"100%\",display};return/* @__PURE__ */import_react.default.createElement(\"div\",{style},/* @__PURE__ */import_react.default.createElement(\"div\",{ref:this.ref}));}}__publicField(YouTube,\"displayName\",\"YouTube\");__publicField(YouTube,\"canPlay\",import_patterns.canPlay.youtube);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcGxheWVyL2xhenkvcGxheWVycy9Zb3VUdWJlLmpzP2U1MTkiXSwibmFtZXMiOlsiX19jcmVhdGUiLCJPYmplY3QiLCJjcmVhdGUiLCJfX2RlZlByb3AiLCJkZWZpbmVQcm9wZXJ0eSIsIl9fZ2V0T3duUHJvcERlc2MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfX2dldE93blByb3BOYW1lcyIsImdldE93blByb3BlcnR5TmFtZXMiLCJfX2dldFByb3RvT2YiLCJnZXRQcm90b3R5cGVPZiIsIl9faGFzT3duUHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiX19kZWZOb3JtYWxQcm9wIiwib2JqIiwia2V5IiwidmFsdWUiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJfX2V4cG9ydCIsInRhcmdldCIsImFsbCIsIm5hbWUiLCJnZXQiLCJfX2NvcHlQcm9wcyIsInRvIiwiZnJvbSIsImV4Y2VwdCIsImRlc2MiLCJjYWxsIiwiX190b0VTTSIsIm1vZCIsImlzTm9kZU1vZGUiLCJfX2VzTW9kdWxlIiwiX190b0NvbW1vbkpTIiwiX19wdWJsaWNGaWVsZCIsIllvdVR1YmVfZXhwb3J0cyIsImRlZmF1bHQiLCJZb3VUdWJlIiwibW9kdWxlIiwiZXhwb3J0cyIsImltcG9ydF9yZWFjdCIsInJlcXVpcmUiLCJpbXBvcnRfdXRpbHMiLCJpbXBvcnRfcGF0dGVybnMiLCJTREtfVVJMIiwiU0RLX0dMT0JBTCIsIlNES19HTE9CQUxfUkVBRFkiLCJNQVRDSF9QTEFZTElTVCIsIk1BVENIX1VTRVJfVVBMT0FEUyIsIk1BVENIX05PQ09PS0lFIiwiTk9DT09LSUVfSE9TVCIsIkNvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwiYXJndW1lbnRzIiwiY2FsbFBsYXllciIsInVybCIsIkFycmF5IiwibGlzdFR5cGUiLCJwbGF5bGlzdCIsIm1hcCIsImdldElEIiwiam9pbiIsInRlc3QiLCJwbGF5bGlzdElkIiwibWF0Y2giLCJsaXN0IiwicmVwbGFjZSIsInVzZXJuYW1lIiwiZXZlbnQiLCJkYXRhIiwib25QbGF5Iiwib25QYXVzZSIsIm9uQnVmZmVyIiwib25CdWZmZXJFbmQiLCJvbkVuZGVkIiwib25SZWFkeSIsImxvb3AiLCJjb25maWciLCJwbGF5ZXJWYXJzIiwib25VbnN0YXJ0ZWQiLCJwcm9wcyIsIlVOU1RBUlRFRCIsIlBMQVlJTkciLCJQQVVTRUQiLCJCVUZGRVJJTkciLCJFTkRFRCIsIkNVRUQiLCJ3aW5kb3ciLCJQbGF5ZXJTdGF0ZSIsImlzUGxheWxpc3QiLCJzdGFydCIsInNlZWtUbyIsInBsYXkiLCJjb250YWluZXIiLCJjb21wb25lbnREaWRNb3VudCIsIm9uTW91bnQiLCJNQVRDSF9VUkxfWU9VVFVCRSIsImxvYWQiLCJpc1JlYWR5IiwicGxheWluZyIsIm11dGVkIiwicGxheXNpbmxpbmUiLCJjb250cm9scyIsIm9uRXJyb3IiLCJlbWJlZE9wdGlvbnMiLCJpZCIsInBsYXllciIsImxvYWRQbGF5bGlzdCIsInBhcnNlUGxheWxpc3QiLCJjdWVWaWRlb0J5SWQiLCJ2aWRlb0lkIiwic3RhcnRTZWNvbmRzIiwicGFyc2VTdGFydFRpbWUiLCJlbmRTZWNvbmRzIiwicGFyc2VFbmRUaW1lIiwiZW5kIiwiZ2V0U0RLIiwiWVQiLCJsb2FkZWQiLCJ0aGVuIiwiUGxheWVyIiwid2lkdGgiLCJoZWlnaHQiLCJhdXRvcGxheSIsIm11dGUiLCJvcmlnaW4iLCJsb2NhdGlvbiIsImV2ZW50cyIsInNldExvb3AiLCJvblBsYXliYWNrUmF0ZUNoYW5nZSIsIm9uUGxheWJhY2tRdWFsaXR5Q2hhbmdlIiwib25TdGF0ZUNoYW5nZSIsImhvc3QiLCJjb25zb2xlIiwid2FybiIsInBhdXNlIiwic3RvcCIsImRvY3VtZW50IiwiYm9keSIsImNvbnRhaW5zIiwiYW1vdW50Iiwia2VlcFBsYXlpbmciLCJzZXRWb2x1bWUiLCJmcmFjdGlvbiIsInNldFBsYXliYWNrUmF0ZSIsInJhdGUiLCJnZXREdXJhdGlvbiIsImdldEN1cnJlbnRUaW1lIiwiZ2V0U2Vjb25kc0xvYWRlZCIsInJlbmRlciIsImRpc3BsYXkiLCJzdHlsZSIsImNyZWF0ZUVsZW1lbnQiLCJyZWYiLCJjYW5QbGF5IiwieW91dHViZSJdLCJtYXBwaW5ncyI6IjBoREFBQSxHQUFJQSxTQUFRLENBQUdDLE1BQU0sQ0FBQ0MsTUFBdEIsQ0FDQSxHQUFJQyxVQUFTLENBQUdGLE1BQU0sQ0FBQ0csY0FBdkIsQ0FDQSxHQUFJQyxpQkFBZ0IsQ0FBR0osTUFBTSxDQUFDSyx3QkFBOUIsQ0FDQSxHQUFJQyxrQkFBaUIsQ0FBR04sTUFBTSxDQUFDTyxtQkFBL0IsQ0FDQSxHQUFJQyxhQUFZLENBQUdSLE1BQU0sQ0FBQ1MsY0FBMUIsQ0FDQSxHQUFJQyxhQUFZLENBQUdWLE1BQU0sQ0FBQ1csU0FBUCxDQUFpQkMsY0FBcEMsQ0FDQSxHQUFJQyxnQkFBZSxDQUFHLENBQUNDLEdBQUQsQ0FBTUMsR0FBTixDQUFXQyxLQUFYLEdBQXFCRCxHQUFHLEdBQUlELElBQVAsQ0FBYVosU0FBUyxDQUFDWSxHQUFELENBQU1DLEdBQU4sQ0FBVyxDQUFFRSxVQUFVLENBQUUsSUFBZCxDQUFvQkMsWUFBWSxDQUFFLElBQWxDLENBQXdDQyxRQUFRLENBQUUsSUFBbEQsQ0FBd0RILEtBQXhELENBQVgsQ0FBdEIsQ0FBb0dGLEdBQUcsQ0FBQ0MsR0FBRCxDQUFILENBQVdDLEtBQTFKLENBQ0EsR0FBSUksU0FBUSxDQUFHLENBQUNDLE1BQUQsQ0FBU0MsR0FBVCxHQUFpQixDQUM5QixJQUFLLEdBQUlDLEtBQVQsR0FBaUJELElBQWpCLENBQ0VwQixTQUFTLENBQUNtQixNQUFELENBQVNFLElBQVQsQ0FBZSxDQUFFQyxHQUFHLENBQUVGLEdBQUcsQ0FBQ0MsSUFBRCxDQUFWLENBQWtCTixVQUFVLENBQUUsSUFBOUIsQ0FBZixDQUFULENBQ0gsQ0FIRCxDQUlBLEdBQUlRLFlBQVcsQ0FBRyxDQUFDQyxFQUFELENBQUtDLElBQUwsQ0FBV0MsTUFBWCxDQUFt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LENBQUNHLE9BQUQsQ0FBVSxTQUFWLENBQXFCTSxlQUFlLENBQUMrRyxPQUFoQixDQUF3QkMsT0FBN0MsQ0FBYiIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9yZWFjdC1wbGF5ZXIvbGF6eS9wbGF5ZXJzL1lvdVR1YmUuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19jcmVhdGUgPSBPYmplY3QuY3JlYXRlO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9fZ2V0UHJvdG9PZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fZGVmTm9ybWFsUHJvcCA9IChvYmosIGtleSwgdmFsdWUpID0+IGtleSBpbiBvYmogPyBfX2RlZlByb3Aob2JqLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSwgdmFsdWUgfSkgOiBvYmpba2V5XSA9IHZhbHVlO1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9FU00gPSAobW9kLCBpc05vZGVNb2RlLCB0YXJnZXQpID0+ICh0YXJnZXQgPSBtb2QgIT0gbnVsbCA/IF9fY3JlYXRlKF9fZ2V0UHJvdG9PZihtb2QpKSA6IHt9LCBfX2NvcHlQcm9wcyhcbiAgLy8gSWYgdGhlIGltcG9ydGVyIGlzIGluIG5vZGUgY29tcGF0aWJpbGl0eSBtb2RlIG9yIHRoaXMgaXMgbm90IGFuIEVTTVxuICAvLyBmaWxlIHRoYXQgaGFzIGJlZW4gY29udmVydGVkIHRvIGEgQ29tbW9uSlMgZmlsZSB1c2luZyBhIEJhYmVsLVxuICAvLyBjb21wYXRpYmxlIHRyYW5zZm9ybSAoaS5lLiBcIl9fZXNNb2R1bGVcIiBoYXMgbm90IGJlZW4gc2V0KSwgdGhlbiBzZXRcbiAgLy8gXCJkZWZhdWx0XCIgdG8gdGhlIENvbW1vbkpTIFwibW9kdWxlLmV4cG9ydHNcIiBmb3Igbm9kZSBjb21wYXRpYmlsaXR5LlxuICBpc05vZGVNb2RlIHx8ICFtb2QgfHwgIW1vZC5fX2VzTW9kdWxlID8gX19kZWZQcm9wKHRhcmdldCwgXCJkZWZhdWx0XCIsIHsgdmFsdWU6IG1vZCwgZW51bWVyYWJsZTogdHJ1ZSB9KSA6IHRhcmdldCxcbiAgbW9kXG4pKTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xudmFyIF9fcHVibGljRmllbGQgPSAob2JqLCBrZXksIHZhbHVlKSA9PiB7XG4gIF9fZGVmTm9ybWFsUHJvcChvYmosIHR5cGVvZiBrZXkgIT09IFwic3ltYm9sXCIgPyBrZXkgKyBcIlwiIDoga2V5LCB2YWx1ZSk7XG4gIHJldHVybiB2YWx1ZTtcbn07XG52YXIgWW91VHViZV9leHBvcnRzID0ge307XG5fX2V4cG9ydChZb3VUdWJlX2V4cG9ydHMsIHtcbiAgZGVmYXVsdDogKCkgPT4gWW91VHViZVxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhZb3VUdWJlX2V4cG9ydHMpO1xudmFyIGltcG9ydF9yZWFjdCA9IF9fdG9FU00ocmVxdWlyZShcInJlYWN0XCIpKTtcbnZhciBpbXBvcnRfdXRpbHMgPSByZXF1aXJlKFwiLi4vdXRpbHNcIik7XG52YXIgaW1wb3J0X3BhdHRlcm5zID0gcmVxdWlyZShcIi4uL3BhdHRlcm5zXCIpO1xuY29uc3QgU0RLX1VSTCA9IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vaWZyYW1lX2FwaVwiO1xuY29uc3QgU0RLX0dMT0JBTCA9IFwiWVRcIjtcbmNvbnN0IFNES19HTE9CQUxfUkVBRFkgPSBcIm9uWW91VHViZUlmcmFtZUFQSVJlYWR5XCI7XG5jb25zdCBNQVRDSF9QTEFZTElTVCA9IC9bPyZdKD86bGlzdHxjaGFubmVsKT0oW2EtekEtWjAtOV8tXSspLztcbmNvbnN0IE1BVENIX1VTRVJfVVBMT0FEUyA9IC91c2VyXFwvKFthLXpBLVowLTlfLV0rKVxcLz8vO1xuY29uc3QgTUFUQ0hfTk9DT09LSUUgPSAveW91dHViZS1ub2Nvb2tpZVxcLmNvbS87XG5jb25zdCBOT0NPT0tJRV9IT1NUID0gXCJodHRwczovL3d3dy55b3V0dWJlLW5vY29va2llLmNvbVwiO1xuY2xhc3MgWW91VHViZSBleHRlbmRzIGltcG9ydF9yZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJjYWxsUGxheWVyXCIsIGltcG9ydF91dGlscy5jYWxsUGxheWVyKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwicGFyc2VQbGF5bGlzdFwiLCAodXJsKSA9PiB7XG4gICAgICBpZiAodXJsIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBsaXN0VHlwZTogXCJwbGF5bGlzdFwiLFxuICAgICAgICAgIHBsYXlsaXN0OiB1cmwubWFwKHRoaXMuZ2V0SUQpLmpvaW4oXCIsXCIpXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBpZiAoTUFUQ0hfUExBWUxJU1QudGVzdCh1cmwpKSB7XG4gICAgICAgIGNvbnN0IFssIHBsYXlsaXN0SWRdID0gdXJsLm1hdGNoKE1BVENIX1BMQVlMSVNUKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBsaXN0VHlwZTogXCJwbGF5bGlzdFwiLFxuICAgICAgICAgIGxpc3Q6IHBsYXlsaXN0SWQucmVwbGFjZSgvXlVDLywgXCJVVVwiKVxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgaWYgKE1BVENIX1VTRVJfVVBMT0FEUy50ZXN0KHVybCkpIHtcbiAgICAgICAgY29uc3QgWywgdXNlcm5hbWVdID0gdXJsLm1hdGNoKE1BVENIX1VTRVJfVVBMT0FEUyk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbGlzdFR5cGU6IFwidXNlcl91cGxvYWRzXCIsXG4gICAgICAgICAgbGlzdDogdXNlcm5hbWVcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7fTtcbiAgICB9KTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwib25TdGF0ZUNoYW5nZVwiLCAoZXZlbnQpID0+IHtcbiAgICAgIGNvbnN0IHsgZGF0YSB9ID0gZXZlbnQ7XG4gICAgICBjb25zdCB7IG9uUGxheSwgb25QYXVzZSwgb25CdWZmZXIsIG9uQnVmZmVyRW5kLCBvbkVuZGVkLCBvblJlYWR5LCBsb29wLCBjb25maWc6IHsgcGxheWVyVmFycywgb25VbnN0YXJ0ZWQgfSB9ID0gdGhpcy5wcm9wcztcbiAgICAgIGNvbnN0IHsgVU5TVEFSVEVELCBQTEFZSU5HLCBQQVVTRUQsIEJVRkZFUklORywgRU5ERUQsIENVRUQgfSA9IHdpbmRvd1tTREtfR0xPQkFMXS5QbGF5ZXJTdGF0ZTtcbiAgICAgIGlmIChkYXRhID09PSBVTlNUQVJURUQpXG4gICAgICAgIG9uVW5zdGFydGVkKCk7XG4gICAgICBpZiAoZGF0YSA9PT0gUExBWUlORykge1xuICAgICAgICBvblBsYXkoKTtcbiAgICAgICAgb25CdWZmZXJFbmQoKTtcbiAgICAgIH1cbiAgICAgIGlmIChkYXRhID09PSBQQVVTRUQpXG4gICAgICAgIG9uUGF1c2UoKTtcbiAgICAgIGlmIChkYXRhID09PSBCVUZGRVJJTkcpXG4gICAgICAgIG9uQnVmZmVyKCk7XG4gICAgICBpZiAoZGF0YSA9PT0gRU5ERUQpIHtcbiAgICAgICAgY29uc3QgaXNQbGF5bGlzdCA9ICEhdGhpcy5jYWxsUGxheWVyKFwiZ2V0UGxheWxpc3RcIik7XG4gICAgICAgIGlmIChsb29wICYmICFpc1BsYXlsaXN0KSB7XG4gICAgICAgICAgaWYgKHBsYXllclZhcnMuc3RhcnQpIHtcbiAgICAgICAgICAgIHRoaXMuc2Vla1RvKHBsYXllclZhcnMuc3RhcnQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnBsYXkoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgb25FbmRlZCgpO1xuICAgICAgfVxuICAgICAgaWYgKGRhdGEgPT09IENVRUQpXG4gICAgICAgIG9uUmVhZHkoKTtcbiAgICB9KTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwibXV0ZVwiLCAoKSA9PiB7XG4gICAgICB0aGlzLmNhbGxQbGF5ZXIoXCJtdXRlXCIpO1xuICAgIH0pO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJ1bm11dGVcIiwgKCkgPT4ge1xuICAgICAgdGhpcy5jYWxsUGxheWVyKFwidW5NdXRlXCIpO1xuICAgIH0pO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJyZWZcIiwgKGNvbnRhaW5lcikgPT4ge1xuICAgICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XG4gICAgfSk7XG4gIH1cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5wcm9wcy5vbk1vdW50ICYmIHRoaXMucHJvcHMub25Nb3VudCh0aGlzKTtcbiAgfVxuICBnZXRJRCh1cmwpIHtcbiAgICBpZiAoIXVybCB8fCB1cmwgaW5zdGFuY2VvZiBBcnJheSB8fCBNQVRDSF9QTEFZTElTVC50ZXN0KHVybCkpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gdXJsLm1hdGNoKGltcG9ydF9wYXR0ZXJucy5NQVRDSF9VUkxfWU9VVFVCRSlbMV07XG4gIH1cbiAgbG9hZCh1cmwsIGlzUmVhZHkpIHtcbiAgICBjb25zdCB7IHBsYXlpbmcsIG11dGVkLCBwbGF5c2lubGluZSwgY29udHJvbHMsIGxvb3AsIGNvbmZpZywgb25FcnJvciB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IHBsYXllclZhcnMsIGVtYmVkT3B0aW9ucyB9ID0gY29uZmlnO1xuICAgIGNvbnN0IGlkID0gdGhpcy5nZXRJRCh1cmwpO1xuICAgIGlmIChpc1JlYWR5KSB7XG4gICAgICBpZiAoTUFUQ0hfUExBWUxJU1QudGVzdCh1cmwpIHx8IE1BVENIX1VTRVJfVVBMT0FEUy50ZXN0KHVybCkgfHwgdXJsIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgdGhpcy5wbGF5ZXIubG9hZFBsYXlsaXN0KHRoaXMucGFyc2VQbGF5bGlzdCh1cmwpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5wbGF5ZXIuY3VlVmlkZW9CeUlkKHtcbiAgICAgICAgdmlkZW9JZDogaWQsXG4gICAgICAgIHN0YXJ0U2Vjb25kczogKDAsIGltcG9ydF91dGlscy5wYXJzZVN0YXJ0VGltZSkodXJsKSB8fCBwbGF5ZXJWYXJzLnN0YXJ0LFxuICAgICAgICBlbmRTZWNvbmRzOiAoMCwgaW1wb3J0X3V0aWxzLnBhcnNlRW5kVGltZSkodXJsKSB8fCBwbGF5ZXJWYXJzLmVuZFxuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgICgwLCBpbXBvcnRfdXRpbHMuZ2V0U0RLKShTREtfVVJMLCBTREtfR0xPQkFMLCBTREtfR0xPQkFMX1JFQURZLCAoWVQpID0+IFlULmxvYWRlZCkudGhlbigoWVQpID0+IHtcbiAgICAgIGlmICghdGhpcy5jb250YWluZXIpXG4gICAgICAgIHJldHVybjtcbiAgICAgIHRoaXMucGxheWVyID0gbmV3IFlULlBsYXllcih0aGlzLmNvbnRhaW5lciwge1xuICAgICAgICB3aWR0aDogXCIxMDAlXCIsXG4gICAgICAgIGhlaWdodDogXCIxMDAlXCIsXG4gICAgICAgIHZpZGVvSWQ6IGlkLFxuICAgICAgICBwbGF5ZXJWYXJzOiB7XG4gICAgICAgICAgYXV0b3BsYXk6IHBsYXlpbmcgPyAxIDogMCxcbiAgICAgICAgICBtdXRlOiBtdXRlZCA/IDEgOiAwLFxuICAgICAgICAgIGNvbnRyb2xzOiBjb250cm9scyA/IDEgOiAwLFxuICAgICAgICAgIHN0YXJ0OiAoMCwgaW1wb3J0X3V0aWxzLnBhcnNlU3RhcnRUaW1lKSh1cmwpLFxuICAgICAgICAgIGVuZDogKDAsIGltcG9ydF91dGlscy5wYXJzZUVuZFRpbWUpKHVybCksXG4gICAgICAgICAgb3JpZ2luOiB3aW5kb3cubG9jYXRpb24ub3JpZ2luLFxuICAgICAgICAgIHBsYXlzaW5saW5lOiBwbGF5c2lubGluZSA/IDEgOiAwLFxuICAgICAgICAgIC4uLnRoaXMucGFyc2VQbGF5bGlzdCh1cmwpLFxuICAgICAgICAgIC4uLnBsYXllclZhcnNcbiAgICAgICAgfSxcbiAgICAgICAgZXZlbnRzOiB7XG4gICAgICAgICAgb25SZWFkeTogKCkgPT4ge1xuICAgICAgICAgICAgaWYgKGxvb3ApIHtcbiAgICAgICAgICAgICAgdGhpcy5wbGF5ZXIuc2V0TG9vcCh0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucHJvcHMub25SZWFkeSgpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgb25QbGF5YmFja1JhdGVDaGFuZ2U6IChldmVudCkgPT4gdGhpcy5wcm9wcy5vblBsYXliYWNrUmF0ZUNoYW5nZShldmVudC5kYXRhKSxcbiAgICAgICAgICBvblBsYXliYWNrUXVhbGl0eUNoYW5nZTogKGV2ZW50KSA9PiB0aGlzLnByb3BzLm9uUGxheWJhY2tRdWFsaXR5Q2hhbmdlKGV2ZW50KSxcbiAgICAgICAgICBvblN0YXRlQ2hhbmdlOiB0aGlzLm9uU3RhdGVDaGFuZ2UsXG4gICAgICAgICAgb25FcnJvcjogKGV2ZW50KSA9PiBvbkVycm9yKGV2ZW50LmRhdGEpXG4gICAgICAgIH0sXG4gICAgICAgIGhvc3Q6IE1BVENIX05PQ09PS0lFLnRlc3QodXJsKSA/IE5PQ09PS0lFX0hPU1QgOiB2b2lkIDAsXG4gICAgICAgIC4uLmVtYmVkT3B0aW9uc1xuICAgICAgfSk7XG4gICAgfSwgb25FcnJvcik7XG4gICAgaWYgKGVtYmVkT3B0aW9ucy5ldmVudHMpIHtcbiAgICAgIGNvbnNvbGUud2FybihcIlVzaW5nIGBlbWJlZE9wdGlvbnMuZXZlbnRzYCB3aWxsIGxpa2VseSBicmVhayB0aGluZ3MuIFVzZSBSZWFjdFBsYXllclxcdTIwMTlzIGNhbGxiYWNrIHByb3BzIGluc3RlYWQsIGVnIG9uUmVhZHksIG9uUGxheSwgb25QYXVzZVwiKTtcbiAgICB9XG4gIH1cbiAgcGxheSgpIHtcbiAgICB0aGlzLmNhbGxQbGF5ZXIoXCJwbGF5VmlkZW9cIik7XG4gIH1cbiAgcGF1c2UoKSB7XG4gICAgdGhpcy5jYWxsUGxheWVyKFwicGF1c2VWaWRlb1wiKTtcbiAgfVxuICBzdG9wKCkge1xuICAgIGlmICghZG9jdW1lbnQuYm9keS5jb250YWlucyh0aGlzLmNhbGxQbGF5ZXIoXCJnZXRJZnJhbWVcIikpKVxuICAgICAgcmV0dXJuO1xuICAgIHRoaXMuY2FsbFBsYXllcihcInN0b3BWaWRlb1wiKTtcbiAgfVxuICBzZWVrVG8oYW1vdW50LCBrZWVwUGxheWluZyA9IGZhbHNlKSB7XG4gICAgdGhpcy5jYWxsUGxheWVyKFwic2Vla1RvXCIsIGFtb3VudCk7XG4gICAgaWYgKCFrZWVwUGxheWluZyAmJiAhdGhpcy5wcm9wcy5wbGF5aW5nKSB7XG4gICAgICB0aGlzLnBhdXNlKCk7XG4gICAgfVxuICB9XG4gIHNldFZvbHVtZShmcmFjdGlvbikge1xuICAgIHRoaXMuY2FsbFBsYXllcihcInNldFZvbHVtZVwiLCBmcmFjdGlvbiAqIDEwMCk7XG4gIH1cbiAgc2V0UGxheWJhY2tSYXRlKHJhdGUpIHtcbiAgICB0aGlzLmNhbGxQbGF5ZXIoXCJzZXRQbGF5YmFja1JhdGVcIiwgcmF0ZSk7XG4gIH1cbiAgc2V0TG9vcChsb29wKSB7XG4gICAgdGhpcy5jYWxsUGxheWVyKFwic2V0TG9vcFwiLCBsb29wKTtcbiAgfVxuICBnZXREdXJhdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5jYWxsUGxheWVyKFwiZ2V0RHVyYXRpb25cIik7XG4gIH1cbiAgZ2V0Q3VycmVudFRpbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2FsbFBsYXllcihcImdldEN1cnJlbnRUaW1lXCIpO1xuICB9XG4gIGdldFNlY29uZHNMb2FkZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2FsbFBsYXllcihcImdldFZpZGVvTG9hZGVkRnJhY3Rpb25cIikgKiB0aGlzLmdldER1cmF0aW9uKCk7XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgZGlzcGxheSB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBzdHlsZSA9IHtcbiAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgIGhlaWdodDogXCIxMDAlXCIsXG4gICAgICBkaXNwbGF5XG4gICAgfTtcbiAgICByZXR1cm4gLyogQF9fUFVSRV9fICovIGltcG9ydF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBzdHlsZSB9LCAvKiBAX19QVVJFX18gKi8gaW1wb3J0X3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IHJlZjogdGhpcy5yZWYgfSkpO1xuICB9XG59XG5fX3B1YmxpY0ZpZWxkKFlvdVR1YmUsIFwiZGlzcGxheU5hbWVcIiwgXCJZb3VUdWJlXCIpO1xuX19wdWJsaWNGaWVsZChZb3VUdWJlLCBcImNhblBsYXlcIiwgaW1wb3J0X3BhdHRlcm5zLmNhblBsYXkueW91dHViZSk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/react-player/lazy/players/YouTube.js\n");

/***/ })

}]);